<script>
  {% if template == 'product' or template == 'cart' %}
      let estDeliveryDateArray = []
      var salespriceArray = []
    
      // EST Delivery Date Function
      function deliveryDateConverter(DateArg, today = new Date()){
        var months = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'];
        var date = (today.getMonth() + 1)+'/'+today.getDate()+'/'+today.getFullYear();
        var startDate = date;
        startDate = new Date(startDate);
        var FinalDate_Cal = "", noOfDaysToAdd = parseInt(DateArg), count = 0;
        while(count < noOfDaysToAdd){
          FinalDate_Cal = new Date(startDate.setDate(startDate.getDate() + 1));
          if(FinalDate_Cal.getDay() != 0 && FinalDate_Cal.getDay() != 6){
            count++;
          }
        }
        return FinalDate_Cal;
      }
      
      const nth = function(d) {
        if (d > 3 && d < 21) return 'th';
        switch (d % 10) {
          case 1:  return "st";
          case 2:  return "nd";
          case 3:  return "rd";
          default: return "th";
        }
      }
  
      function getNextWorkingDate(startDate, days) {
        const date = new Date(startDate);
        let count = 0;
        while (count < days) {
            date.setDate(date.getDate() + 1);
            if (date.getDay() !== 0 && date.getDay() !== 6) { 
                count++;
            }
        }
        return date;
      }
    
  {% endif %}
  
  {% if template == 'product' %}
      const shopifyStore = "tiles-4-less.myshopify.com"
      const accessToken = "8fbcf8557368ac166b8856117c0fa914"
      
      var selectedVariantId = {{ product.selected_or_first_available_variant.id }}
      var productID = {{ product.id }}
      var pageTitle = '{{ product.title }}'
      let callForPiceArray = []
      let CalculatorData = []
      let SampleProductsArray = []
      let m2MetafieldArray = []
      let Complementaryproducts
      
      {% if product.variants.size >= 1 %}
        {% for variant in product.variants %}
          
          // CALL FOR PRICE Array
          callForPiceArray.push({
            metafield: {% if variant.metafields.custom.call_to_enquire %} {{ variant.metafields.custom.call_to_enquire }} {% else %} false {% endif %},
            id: {{ variant.id | json}}
          });
  
          // EST Delivery Date Array
          estDeliveryDateArray.push({
            id: {{ variant.id | json }},
            datestart: {%
            if variant.metafields.custom.estimated_delivery_date %}
              {% assign date_parts = variant.metafields.custom.estimated_delivery_date | split: '-' %}
              "{{ date_parts[0] }}"
            {% else %}
              ""
            {% endif %},
            dateend: {%
            if variant.metafields.custom.estimated_delivery_date %}
              {% assign date_parts = variant.metafields.custom.estimated_delivery_date | split: '-' %}
              "{{ date_parts[1] }}"
            {% else %}
              ""
            {% endif %},
            product_availability_status: {%
            if variant.metafields.custom.product_availability_status %}
              {% assign value = variant.metafields.custom.product_availability_status %}
              "{{ value }}"
            {% else %}
              ""
            {% endif %},
            restock_date: {% if variant.metafields.custom.restocking_date %} "{{ variant.metafields.custom.restocking_date}}" {% else %} "" {% endif %}
          });

          // QUANTITY CALCULATOR
          CalculatorData.push({
            m2_coverage: {% if variant.metafields.custom.m2_coverage %} "{{ variant.metafields.custom.m2_coverage}}" {% else %} "" {% endif %},
            quantity_calculator: {% if product.metafields.custom.quantity_calculator %} '{{ product.metafields.custom.quantity_calculator}}' {% else %} '' {% endif %},
            id: {{ variant.id | json}},
          });

          // SAMPLE PRODUCTS
          SampleProductsArray.push({
            id: {{ variant.id | json }},
            sampleProductID: {% if variant.metafields.custom.sample_product %} "{{ variant.metafields.custom.sample_product}}" {% elsif product.metafields.custom.sample_product %} "{{ product.metafields.custom.sample_product}}" {% else %} "" {% endif %},
          })

          // SALES PRICE Array
          salespriceArray.push({
            id: {{ variant.id | json}},
            compare_price: {% if variant.compare_at_price %} '{{ variant.compare_at_price | money | replace: '£', '' | replace: ',', '' }}' {% else %} null {% endif %},
            original_price: {% if variant.price %} '{{ variant.price | money | replace: '£', '' | replace: ',', '' }}' {% else %} null {% endif %}
          });

          m2MetafieldArray.push({
            id: {{ variant.id | json }},
            m2_coverage: {{ variant.metafields.custom.m2_coverage | json }} != null ? Number({{ variant.metafields.custom.m2_coverage | json }}) : 0,
            price_per_m2: Number(({{ variant.price | times: 1.2 | json }} / 100) / Number({{ variant.metafields.custom.m2_coverage | json }}).toFixed(3)),
            price_per_m2_ex_vat: Number(({{ variant.price | json }} / 100) / Number({{ variant.metafields.custom.m2_coverage | json }}).toFixed(3)),
            price_ex_vat: Number({{ variant.price | json }} / 100),
            price_inc_vat: Number({{ variant.price | times: 1.2 | json }} / 100),
            was_price_ex_vat: Number({{ variant.compare_at_price | json }} / 100),
            was_price_inc_vat: Number({{ variant.compare_at_price | times: 1.2 | json }} / 100),
            variant_call_for_price: {{ variant.metafields.custom.call_for_price | json }},
          })
          
        {% endfor %}
      {% endif %}

      // Complementary products
      {% if product.metafields.shopify--discovery--product_recommendation.complementary_products %} 
        Complementaryproducts = {{ product.metafields.shopify--discovery--product_recommendation.complementary_products }}
      {% endif %}
    
      // CALL FOR PRICE FUCNTION
      function callForPrice(variant_id){
         if(callForPiceArray && callForPiceArray.length > 0){
           var have_call_for_price = callForPiceArray.find(variant => variant.id == variant_id).metafield
           if(have_call_for_price){
             jQuery('.product__info-container').addClass('have_call_for_price')
           } else {
             jQuery('.product__info-container').removeClass('have_call_for_price')
           }
         }
      }

      // M2 Calculator
      function computeTileQuantity(selector, selector2, udpate_sqm_input = true) {      
        if(window.location.href.split('?variant=').length == 2) {
          selectedVariantId = parseInt(window.location.href.split('=')[1])
        }   
        var variant_call_for_price = m2MetafieldArray.find(variant => variant.id == selectedVariantId).variant_call_for_price
        var main_product_call_for_price = {{ product.metafields.custom.call_for_price | json }}
      
          if(variant_call_for_price == null && main_product_call_for_price == null) {
              var selectedVariant_m2_converage = Number(m2MetafieldArray.find(variant => variant.id == selectedVariantId).m2_coverage)
              var currentQuantityValue = Number($('input[name="quantity"]').val())
        
              if(selectedVariant_m2_converage > 0) {
                var updated_sqm_input = 0
                currentQuantityValue = Number($('input[name="quantity"]').val())
            
                updated_sqm_input =  Number(selectedVariant_m2_converage *  currentQuantityValue).toFixed(3)
                if (udpate_sqm_input) $('input[name="sqm_input"]').val(updated_sqm_input)
                $('.sqm-user-input-block').css('display', 'block') 
                $('.or-block').css('display', 'block') 
              } else {
                $('.sqm-user-input-block').css('display', 'none')
                $('.or-block').css('display', 'none') 
              }
    
              // Compute for price per m2
              let price_per_m2 = Number(m2MetafieldArray.find(variant => variant.id == selectedVariantId).price_per_m2)
              let price_per_m2_exc_vat = Number(m2MetafieldArray.find(variant => variant.id == selectedVariantId).price_per_m2_ex_vat)
              var formatter = new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: '{{ cart.currency.iso_code }}',
                minimumFractionDigits: 2
              })                    	
              price_per_m2 = formatter.format(price_per_m2)						
              price_per_m2_exc_vat = formatter.format(price_per_m2_exc_vat)
              $('#price_per_m2').html(`<div class="price_per_m2 inline"> ${price_per_m2} <small style="font-size: 60%;">/M2</small></div> `)
    
              let price_ex_vat = Number( currentQuantityValue * m2MetafieldArray.find(variant => variant.id == selectedVariantId).price_ex_vat )
              let price_inc_vat = Number( currentQuantityValue * m2MetafieldArray.find(variant => variant.id == selectedVariantId).price_inc_vat )
              let was_price_ex_vat = Number( currentQuantityValue * m2MetafieldArray.find(variant => variant.id == selectedVariantId).was_price_ex_vat )
              let was_price_inc_vat = Number( currentQuantityValue * m2MetafieldArray.find(variant => variant.id == selectedVariantId).was_price_inc_vat )
              let price_inc_vat_item = Number( 1 * m2MetafieldArray.find(variant => variant.id == selectedVariantId).price_inc_vat)
              let price_exc_vat_item = Number( 1 * m2MetafieldArray.find(variant => variant.id == selectedVariantId).price_ex_vat)
              $('.product__info-container .price__regular .price-item--regular.exc_vat_price').html(formatter.format(price_ex_vat)+ ' ' )
              $('.product__info-container .price__regular .price-item--regular.inc_vat_price').html(formatter.format(price_inc_vat)+ ' ' )
              $('.product__info-container .price__sale .price-item--sale.exc_vat_price').html(formatter.format(price_ex_vat)+ ' ' )
              $('.product__info-container .price__sale .price-item--sale.inc_vat_price').html(formatter.format(price_inc_vat)+ ' ' )
              $('.product__info-container .price__sale .price-item--regular.exc_vat_price').html(formatter.format(was_price_ex_vat)+ ' ')
              $('.product__info-container .price__sale .price-item--regular.inc_vat_price').html(formatter.format(was_price_inc_vat)+ ' ')

              $(selector+'.inc_vat_price').html(formatter.format(price_inc_vat_item))
              $(selector+'.exc_vat_price').html(formatter.format(price_exc_vat_item))
              $(selector2+'.inc_vat_price').html(price_per_m2)
              $(selector2+'.exc_vat_price').html(price_per_m2_exc_vat)
              $('.price').css('display', 'block') 
          } else {
              $('.sqm-user-input-block').css('display', 'none')
              $('.or-block').css('display', 'none') 
              $('.price').css('display', 'none') 
              $('.price_per_m2').css('display', 'none') 
          }
      }

      // Increase/Decrease or Change quantity and update the prices base on m2...
      $(".product-form__controls-group .row-block .input_field_wrap button.quantity__button:not(.disabled), .product-form__controls-group input[name='quantity']").on('keyup click', function () {
        {% if product.metafields.custom.enable_calulator == true  %}
                setTimeout(function () {
                  computeTileQuantity('.cart__qty.quantity-box .quantity-block .common_field_label div.not', '.cart__qty.quantity-box .sqm-qty-block .sqm-user-input-block .common_field_label div.not')
                }, 0);
         {% else %}
                setTimeout(function () {
                  computeTileQuantity('.cart__qty.quantity-box .quantity-block .common_field_label div.not', '.cart__qty.quantity-box .sqm-qty-block .sqm-user-input-block .common_field_label div.not')
                }, 0);
          {% endif %}
      })

      // On SQM Input change                                                         
      $('input[name="sqm_input"]').on('keyup blur', function (e) {
          if(window.location.href.split('?variant=').length == 2) {
            selectedVariantId = parseInt(window.location.href.split('=')[1])
          }
          var selectedVariant_m2_converage = Number(m2MetafieldArray.find(variant => variant.id == selectedVariantId).m2_coverage)
      
          if(selectedVariant_m2_converage > 0) {
              var currentQuantityValue = Number($('input[name="quantity"]').val())
              var currentSQMAreaInput  = Number(this.value)
              function roundUpOverQuarter(num) {
                  return Math.ceil(num - .0)
              }
              var TilesNeeded = Number(currentSQMAreaInput / selectedVariant_m2_converage)
              TilesNeeded = roundUpOverQuarter(TilesNeeded)
              var updated_sqm_input =  Number(selectedVariant_m2_converage *  currentQuantityValue).toFixed(2)
              var updated_sqm_input_for_next_input =  Number(selectedVariant_m2_converage *  (currentQuantityValue + 1)).toFixed(2)
              // Add the tilesNeeded to Quantity
              if(currentSQMAreaInput > updated_sqm_input || (currentSQMAreaInput > updated_sqm_input_for_next_input && currentSQMAreaInput < updated_sqm_input_for_next_input )) {
                $('input[name="quantity"]').val(parseInt(TilesNeeded))
              } else {
                  $('input[name="quantity"]').val(parseInt(TilesNeeded))
              }
      
              $('.sqm-user-input-block').css('display', 'block') 
              $('.or-block').css('display', 'block') 
          } else {
              $('.sqm-user-input-block').css('display', 'none')
              $('.or-block').css('display', 'none') 
          } 
          setTimeout(function () {
            computeTileQuantity('.cart__qty.quantity-box .quantity-block .common_field_label div.not', '.cart__qty.quantity-box .sqm-qty-block .sqm-user-input-block .common_field_label div.not', false)
          }, 0);
      })
            
      // EST Delivery Date Function
      function estDeliveryDate(variant_id){
        jQuery('.in_stock_label').hide()
        jQuery('.in_stock_label').removeClass('red')
        jQuery('.in_stock_label').removeClass('orange')
        if(jQuery('.fromDate').length) {
          var dateStart = estDeliveryDateArray.find(variant => variant.id == variant_id).datestart;
          var dateEnd = estDeliveryDateArray.find(variant => variant.id == variant_id).dateend;
          var restock_date = estDeliveryDateArray.find(variant => variant.id == variant_id).restock_date;
          if(dateStart !== "" && dateEnd !== ""){
            const restock_inputDate = new Date(restock_date);
            const today = new Date();
            const exact_days = dateEnd - dateStart;
            const resultDate = getNextWorkingDate(restock_inputDate, exact_days)
            if(restock_date !== "" && restock_inputDate > today){
                //jQuery('.in_stock_label').hide()
                jQuery('.est_delivery_date').find('p strong').html(`Expected in stock: <span>${Number(restock_inputDate.toString('dd MMM').split(' ')[2]).toString() + nth(parseInt(restock_inputDate.toString('dd MMM').split(' ')[2])) + " " + restock_inputDate.toString('dd MMM').split(' ')[1]}</span>.<div>Est delivery: <span class="fromDate">${Number(deliveryDateConverter(dateStart, restock_inputDate).toString('dd MMM').split(' ')[2]).toString() + nth(Number(deliveryDateConverter(dateStart, restock_inputDate).toString('dd MMM').split(' ')[2])) + " " + deliveryDateConverter(dateStart, restock_inputDate).toString('dd MMM').split(' ')[1]}</span> - <span class="toDate">${Number(deliveryDateConverter(dateEnd, restock_inputDate).toString('dd MMM').split(' ')[2]).toString() + nth(deliveryDateConverter(dateEnd, restock_inputDate).toString('dd MMM').split(' ')[2]) + " " + deliveryDateConverter(dateEnd, restock_inputDate).toString('dd MMM').split(' ')[1]}</span>.</div>`); 
            } else {
                const days = getWeekdaysBetween(deliveryDateConverter(dateStart), today)
                if (days > 10) {
                   jQuery('.in_stock_label').hide()
                }
                if (days <= 5) {
                   jQuery('.in_stock_label').show()
                   jQuery('.in_stock_label .in_stock_text').text(' In stock, ready for delivery')
                } else {
                  jQuery('.in_stock_label').show()
                  jQuery('.in_stock_label .in_stock_text').text('In stock')
                }
                jQuery('.est_delivery_date').find('p strong').html(`Est Delivery between <span class="fromDate">${Number(deliveryDateConverter(dateStart).toString('dd MMM').split(' ')[2]) + nth(parseInt(deliveryDateConverter(dateStart).toString('dd MMM').split(' ')[2])) + " " + deliveryDateConverter(dateStart).toString('dd MMM').split(' ')[1]}</span> and <span class="toDate">${Number(deliveryDateConverter(dateEnd).toString('dd MMM').split(' ')[2]) + nth(parseInt(deliveryDateConverter(dateEnd).toString('dd MMM').split(' ')[2])) + " " + deliveryDateConverter(dateEnd).toString('dd MMM').split(' ')[1]}</span>.`);
            }
            jQuery('.est_delivery_date').show();
          } else{
            jQuery('.in_stock_label').show()
            jQuery('.in_stock_label .in_stock_text').text('In stock')
            jQuery('.est_delivery_date').hide();
          }
        }

        var availability_status = estDeliveryDateArray.find(variant => variant.id == variant_id).product_availability_status;
        var restock_date = estDeliveryDateArray.find(variant => variant.id == variant_id).restock_date;
      
        if (availability_status && availability_status.trim() !== "") {
          jQuery('.in_stock_label').show();
          switch (availability_status.toLowerCase()) {
            case 'discontinued':
              jQuery('.in_stock_label').addClass('red')
              jQuery('.in_stock_label .in_stock_text').html('<span>Discontinued</span>');
              break;
            case 'no_restock_date':
              jQuery('.in_stock_label').addClass('red')
              jQuery('.in_stock_label .in_stock_text').html('<span>Out of stock</span>');
              break;
            case 'not_for_sale':
            case 'poa':
            case 'custom_product':
            case 'cte':
              jQuery('.in_stock_label').hide(); // Just hide the whole label
              break;
            default:
              jQuery('.in_stock_label').hide(); // For any other unknown status
              break;
          }
        }
      
        if (restock_date && restock_date.trim() !== "") {
          jQuery('.in_stock_label').show();
          jQuery('.in_stock_label').addClass('orange')
          jQuery('.in_stock_label .in_stock_text').html('Available for backorder');
        }
      }

      function normalizeDate(date) {
        return new Date(date.getFullYear(), date.getMonth(), date.getDate());
      }
      
      function getWeekdaysBetween(date1, date2) {
        const start = normalizeDate(new Date(Math.min(date1, date2)));
        const end = normalizeDate(new Date(Math.max(date1, date2)));
      
        let count = 0;
        const current = new Date(start);
      
        while (current <= end) {
          const day = current.getDay();
          if (day !== 0 && day !== 6) {
            count++;
          }
          current.setDate(current.getDate() + 1);
        }
      
        return count;
      }
      
      // QUANTITY CALCULATOR FUNCTION
      function showCalculator(selectedVariantId){
           var variant_m2_val = CalculatorData.find(variant => variant.id == selectedVariantId).m2_coverage
           var quantity_calculator = CalculatorData.find(variant => variant.id == selectedVariantId).quantity_calculator
           
           if(variant_m2_val && quantity_calculator !== "" && !quantity_calculator.includes('No')){
           if(quantity_calculator.includes('Yes (with wastage)')){
             jQuery('.calculator .calculator_content .wastage_content > label, .calculator .calculator_content .wastage_content > p').show()
           } else {
             jQuery('.calculator .calculator_content .wastage_content > label, .calculator .calculator_content .wastage_content > p').hide()
           }
           jQuery('.product__info-wrapper .calculator').slideDown()
           } else {
             jQuery('.product__info-wrapper .calculator').slideUp()
           }
       }
      function updateToDefault(productQuantity, wastage_text, show_wastage, selectedVariantId){
           jQuery('.product__info-wrapper .quantity__input').val(productQuantity).change()
           jQuery('.wastage_content .wastage_text span.m2_val').html(wastage_text);
            jQuery('.wastage_content .wastage_text span > .qty_field').html(productQuantity)
           if(show_wastage){
             jQuery('.wastage_content .wastage_text').slideDown()
           } else{
             jQuery('.wastage_content .wastage_text').hide()
           }
           jQuery('.calculator .calculator_content .calculate.btn span').hide()
      }
      
      // GET THE METAFIELDS FOR RECOMMENDED PRODUCTS
      async function relatedProducts(id) {
        const productId = `gid://shopify/Product/${id}`;
        const query = `
          {
            product(id: "${productId}") {
              id
              variants(first: 50) {
                edges {
                  node {
                    id
                    price {
                      amount
                      currencyCode
                    }
                    compareAtPrice {
                      amount
                      currencyCode
                    }
                    metafields(identifiers: [{ namespace: "custom", key: "call_to_enquire" }]) {
                      namespace
                      key
                      value
                    }
                  }
                }
              }
            }
          }`;
    
        try {
            const response = await fetch(`https://${shopifyStore}/api/2024-04/graphql.json`, {
                method: "POST",
                headers: {
                    "X-Shopify-Storefront-Access-Token": accessToken,
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ query })
            });
    
            const data = await response.json();
            let product_detail = {id: 0, is_call_enquire: false}
    
            if (data.errors) {
                console.error("GraphQL Errors:", data.errors);
            } else {
                const product_variant = data.data.product?.variants?.edges;
                const group_products = product_variant?.length > 1;
    
                if (group_products) {
                    const sortedVariants = product_variant.sort((a, b) => {
                        return parseFloat(a.node.price.amount) - parseFloat(b.node.price.amount)
                    })
                  
                    let foundValidVariant = false;
                
                    for (const variantEdge of sortedVariants) {
                        const variant = variantEdge.node;
                        const callForPrice = variant.metafields[0]?.value === 'true'
                
                        if (!callForPrice) {
                            product_detail = {
                                id: variant.id,
                                is_call_enquire: false,
                                price: variant.price.amount,
                                compare_price: variant?.compareAtPrice?.amount
                            };
                            foundValidVariant = true;
                            break;
                        }
                    }
                
                    if (!foundValidVariant) {
                        product_detail = { id: 0, is_call_enquire: true };
                    }
                } else {
                  
                    if (product_variant && product_variant[0]?.node.metafields[0] && product_variant[0]?.node.metafields[0]?.value) {
                        if (product_variant[0]?.node.metafields[0]?.value === 'true') {
                            product_detail = {id: 0, is_call_enquire: true}
                        }
                    }
                }
            }
    
            return product_detail
          } catch (error) {
              console.error("Error fetching metafields:", error);
              return false;
          }
      }

      // Fetch Complementary products
      async function fetchComplementaryProducts(id) {
        const query = `
            {
                product(id: "${id}") {
                id
                title
                onlineStoreUrl
                images(first: 10) {
                    edges {
                    node {
                        src
                        altText
                    }
                    }
                }
                variants(first: 50) {
                    edges {
                    node {
                        id
                        title
                        price {
                        amount
                        currencyCode
                        }
                        compareAtPrice {
                        amount
                        currencyCode
                        }
                        image {
                        src
                        altText
                        }
                        metafields(identifiers: [{ namespace: "custom", key: "call_to_enquire" }]) {
                        namespace
                        key
                        value
                        }
                    }
                    }
                }
                }
            }`;
    
        try {
            const response = await fetch(`https://${shopifyStore}/api/2024-04/graphql.json`, {
                method: "POST",
                headers: {
                    "X-Shopify-Storefront-Access-Token": accessToken,
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ query })
            });
    
            const data = await response.json()
            let html = ''
            if (data.errors) {
                console.error("GraphQL Errors:", data.errors);
            } else {
                  let is_call_enquire = false
                  let sale_percentage = null
                  var discountVal = []
                  const product = data.data.product;
                  let product_title = product.title;
                  let product_url = product.onlineStoreUrl;
                  let product_images = product.images.edges.map(edge => edge.node.src);
                  let product_price = product.variants.edges[0].node.price.amount;
                  let compare_price = product.variants.edges[0].node?.compareAtPrice?.amount;
                  let product_variant = product?.variants?.edges;
                  is_call_enquire = product_variant[0].node?.metafields[0]?.value === 'true'
                  let group_products = product_variant.length > 1
                  if(group_products){
                    const variants = product.variants.edges;
                    for(var i = 0; i < variants.length; i++){
                      if(variants[i].node.compareAtPrice.amount){
                          let percentage_val = (variants[i].node.compareAtPrice.amount) - (variants[i].node.price.amount);
                          percentage_val = Number((percentage_val / (variants[i].node.compareAtPrice.amount)) * 100).toFixed(0)
                          discountVal.push(percentage_val)
                      }
                    }
                    if(discountVal.length > 0){
                      sale_percentage = findHighestNumber(discountVal)
                    }
                    const minPrice = variants.reduce((min, current) => {
                        return parseFloat(current.node.price.amount) < parseFloat(min.node.price.amount) ? current : min;
                    })
                    const compareAtPrices = variants.filter(v => v.node?.compareAtPrice?.amount);
                    const minComparePrice = compareAtPrices.length > 0 
                        ? compareAtPrices.reduce((min, current) => 
                            parseFloat(current.node.compareAtPrice.amount) < parseFloat(min.node.compareAtPrice.amount) ? current : min
                          ) 
                        : null;
                    if(minPrice && minPrice?.node?.metafields[0]?.value){
                        const sortedVariants = product_variant.sort((a, b) => {
                            return parseFloat(a.node.price.amount) - parseFloat(b.node.price.amount)
                        })
                        let foundValidVariant = false
                        for (const variantEdge of sortedVariants) {
                          const variant = variantEdge.node;
                          const callForPrice = variant.metafields[0]?.value === 'true'
                      
                          if (!callForPrice) {
                              product_price = variant?.price?.amount
                              compare_price = variant?.compareAtPrice?.amount
                              is_call_enquire = false
                              foundValidVariant = true
                              break;
                          }
                      }
                      if (!foundValidVariant) {
                          is_call_enquire = true
                      }
                        
                    } else {
                        product_price = minPrice?.node?.price?.amount
                        compare_price = minComparePrice?.node?.compareAtPrice?.amount
                    }
                  }
                  let truncatedTitle = product.title
                  let show_sale_price = compare_price && parseFloat(compare_price) > parseFloat(product_price);
                  if (truncatedTitle.length > 60) {
                      truncatedTitle = truncatedTitle.substring(0, 60) + "...";
                  }
                  
                  if(show_sale_price){
                     if(!group_products){
                         sale_percentage = Number(compare_price - product_price)     
                         sale_percentage = Math.round((sale_percentage / compare_price) * 100).toFixed(0)
                     }
                  }
                  html = `
                      <div class="col-xs-6 col-md-3">
                        <div class="recommendation-item ${group_products ? 'group_product' : ''} ${is_call_enquire ? 'call_enquire' : ''}">
                          <a href="${product_url}">
                              <img src="${product_images[0]}" alt="${product.title}" class="recommendation-image">
                              <p class="recommendation-title">${truncatedTitle}</p>
                          </a>
                          <div class="badge badge_sale ${sale_percentage ? 'show' : '' }">
                              ${group_products ? 'Save up to <strong>' + sale_percentage + '%</strong>' : sale_percentage && 'Save <strong>' + sale_percentage + '%</strong>' }
                          </div>
                          ${show_sale_price ? `
                            <div class="sale_price">
                              <p class="recommendation-price exc_vat_price">£${product_price}</p>
                              <p class="recommendation-price compare_price exc_vat_price">£${compare_price}</p>
                              
                              <p class="recommendation-price inc_vat_price">£${((product_price) * 1.2).toFixed(2)}</p>
                              <p class="recommendation-price compare_price inc_vat_price">£${((compare_price) * 1.2).toFixed(2)}</p>
                            </div>
                          ` : `
                            <div class="regular_price">
                              <p class="recommendation-price exc_vat_price">£${product_price}</p>
                              <p class="recommendation-price inc_vat_price">£${(product_price * 1.2).toFixed(2)}</p>
                            </div>
                          `}
                            <a class="make_enquiry" href="/pages/contact" target="_blank">Make an enquiry</a>
                        </div>
                      </div>
                  `;  
              
                if (group_products) {

                } else {
                
                }
            }
    
            return html
          } catch (error) {
              console.error("Error fetching metafields:", error);
              return false;
          }
      }

      // SAMPLE PRODUCT FUNCTIONALITY
      function getProductVariantData(id, callback) {
        var variantUrl = "/variants/" + id + ".json";
        $.getJSON(variantUrl, function (variant) {
          $.ajax({
            url: '/cart.js',
            type: 'GET',
            dataType: 'json',
            success: function (cart) {
              if (cart.item_count > 0) {
                var sampleItems = cart.items
                  .filter(function (item) {
                    return item.title.includes('Sample');
                  })
                  .map(function (item) {
                    return item.id;
                  });
                callback(sampleItems);
              } else {
                callback([]);
              }
            },
            error: function (err) {
              console.error("Error fetching cart data:", err);
              callback([]);
            }
          });
        });
      }

      function getProductVariantDetail(id) {
        var variantUrl = "/variants/" + id + ".json";
        jQuery('.sample_product').addClass('have_sample')
        $.getJSON(variantUrl, function (variant) {
        var price = variant.product_variant.price;
        $.ajax({
          url: '/cart.js',
          type: 'GET',
          dataType: 'json',
          success: function (cart) {
            var response = cart;
            if (response.item_count > 0) {
              var cartItems = [];
              var sampleItems = [];
              response.items.forEach(function (item) {
                cartItems.push(item.id)
                if (item.title.includes('Sample')) {
                  sampleItems.push(item.id)
                }
              });
              if (cartItems.includes(parseInt(id))) {
                jQuery('.sample_product.btn').addClass('product_added')
                jQuery('.sample_product.btn span.inc_vat_price').text('Sample added to cart')
                jQuery('.sample_product.btn span.exc_vat_price').text('Sample added to cart')
                $('.sample_product.btn').removeClass('loading')
              } else {
                if (sampleItems && sampleItems.length >= 3) {
                  jQuery('.sample_product.btn').addClass('product_added')
                  jQuery('.sample_product.btn span').text('3 sample limit reached')
                } else {
                  if (price < 0.1) {
                    jQuery('.sample_product.btn span').addClass('free_sample').text('Add free sample')
                  } else {
                    jQuery('.sample_product.btn span.exc_vat_price').removeClass('free_sample').text('Add sample (£' + price + ')')
                    jQuery('.sample_product.btn span.inc_vat_price').removeClass('free_sample').text('Add sample (£' + (price * 1.2).toFixed(2) + ')')
                  }
                }
                $('.sample_product.btn').removeClass('loading')
              }
            } else {
              if (sampleItems && sampleItems.length >= 3) {
                jQuery('.sample_product.btn').addClass('product_added')
                jQuery('.sample_product.btn span').text('3 sample limit reached')
              } else {
                if (price < 0.1) {
                  jQuery('.sample_product.btn span').addClass('free_sample').text('Add free sample')
                } else {
                  jQuery('.sample_product.btn span.inc_vat_price').removeClass('free_sample').text('Add sample (£' + price + ')')
                  jQuery('.sample_product.btn span.exc_vat_price').removeClass('free_sample').text('Add sample (£' + (price * 1.2).toFixed(2) + ')')
                }
              }
              $('.sample_product.btn').removeClass('loading')
            }
          },
          error: function (error) {
          }
        });
      });
      }
    
      // var sampleProductID
      var is_sampleProductID = false
      function sampleVariantFunction(selectedVarID) {
        $('.sample_product.btn').addClass('loading')
        const sampleVariantexist = SampleProductsArray.some(product => {
          sampleProductID = product.sampleProductID.split('/').pop()
          return product.id === selectedVarID
        });
        if (sampleVariantexist) {
          if (sampleProductID && sampleProductID !== "") {
            jQuery('.sample_product').removeClass('product_added')
            getProductVariantDetail(sampleProductID)
            is_sampleProductID = true
          } else {
            jQuery('.sample_product').removeClass('have_sample')
          }
        }
      }

      function saleBadges(variant_id) {
          var sales_price = salespriceArray.find(variant => variant.id == variant_id).compare_price
          var original_price = salespriceArray.find(variant => variant.id == variant_id).original_price
          if(sales_price && original_price && parseFloat(sales_price) > parseFloat(original_price)){
            let sale_percentage = parseFloat(sales_price) - parseFloat(original_price)
            sale_percentage = ((sale_percentage / sales_price) * 100).toFixed(0)
            if(sale_percentage){ jQuery('.price--on-sale .badge.price__badge-sale').text('Save ' + sale_percentage + '%') }
          }          
      }
      

      jQuery(document).ready(function(){
          estDeliveryDate(selectedVariantId)
          showCalculator(selectedVariantId)
          sampleVariantFunction(selectedVariantId)
          saleBadges(selectedVariantId)

          // QUANTITY CALCULATOR FUNCTION
          jQuery('.calculator h4').on('click', function(){
            if (jQuery(this).parent().find('.calculator_content').is(':visible') == true) {
              jQuery(this).parent().find('.calculator_content').slideUp()
              jQuery(this).parent('.calculator').removeClass('active')
            } else{
              jQuery(this).parent().find('.calculator_content').slideDown()
              jQuery(this).parent('.calculator').addClass('active')
            }
          })
  
          jQuery(".calculator .input_fields input[type=number]").on("keypress", function (event) {
             let charCode = event.which ? event.which : event.keyCode;
             let currentValue = jQuery(this).val();
             if (
                 (charCode < 48 || charCode > 57) && charCode !== 46 
             ) {
                 event.preventDefault();
             }
             if (charCode === 46 && currentValue.includes(".")) {
                 event.preventDefault();
             }
          })
        
         jQuery(".calculator .input_fields input[type=number]").on("paste", function (event) {
             let pasteData = (event.originalEvent || event).clipboardData.getData('text')
             if (!/^\d*\.?\d*$/.test(pasteData)) {
                 event.preventDefault()
             }
         });
         
         jQuery('.calculator .calculate.btn').on('click', function(){
           var length = parseFloat(jQuery('.calculator .input_fields input[name="length"]').val())
           var width = parseFloat(jQuery('.calculator .input_fields input[name="width"]').val())
           if(length && width){
             var meter_squer = length *  width;
             var wastage_text = "";
             if(meter_squer){
                 jQuery('.calculator .calculator_content .calculate.btn span').show()
                 if(window.location.href.split('?variant=').length == 2) {
                     selectedVariantId = parseInt(window.location.href.split('=')[1])
                 }
                 var variant_m2_val = CalculatorData.find(variant => variant.id == selectedVariantId).m2_coverage
                 wastage_text = meter_squer.toFixed(2) + 'm<sup>2</sup>'
                 if (jQuery('.calculator .wastage_content input[type="checkbox"]').is(':checked')) {
                     var m2_ten_percent = meter_squer * 0.10
                     meter_squer = (meter_squer + m2_ten_percent).toFixed(2)
                     wastage_text = meter_squer + 'm<sup>2</sup> (inc. 10% wastage)'
                 }
                 var productQuantity = Math.ceil(meter_squer / parseFloat(variant_m2_val))
                 jQuery('.wastage_content .wastage_text span > .default_m2_value').html((productQuantity * parseFloat(variant_m2_val)).toFixed(2) + 'm<sup>2</sup>')
                 setTimeout(function(){
                   updateToDefault(productQuantity, wastage_text, true, selectedVariantId)
                 },500)
             }
           }
         })

         // SAMPLE PRODUCT FUNCTIONALITY
         if (pageTitle.includes('Sample')) {
            jQuery('.product__info-container').find('.product-form__input.product-form__quantity').hide()
            jQuery('.product__info-container .product-form .product-form__buttons .product-form__submit').addClass('loading')
            jQuery('.product__info-container .product-form .product-form__buttons .product-form__submit').find('.loading__spinner').removeClass('hidden')
             getProductVariantData(selectedVariantId, (sampleItems) => {
              if (sampleItems.includes(parseInt(selectedVariantId))) {
                jQuery('.product__info-container .product-form .product-form__buttons .product-form__submit').addClass('disabled')
                jQuery('.product__info-container .product-form .product-form__buttons .product-form__submit span').text('Sample added to cart')
              }
              if (sampleItems && sampleItems.length >= 3 && !sampleItems.includes(parseInt(selectedVariantId))) {
                jQuery('.product__info-container .product-form .product-form__buttons .product-form__submit').addClass('disabled')
                jQuery('.product__info-container .product-form .product-form__buttons .product-form__submit span').text('3 Sample Limit Reached')
              } else {
                //this._addItemToCart(form)
              }
              jQuery('.product__info-container .product-form .product-form__buttons .product-form__submit').removeClass('loading')
              jQuery('.product__info-container .product-form .product-form__buttons .product-form__submit').find('.loading__spinner').addClass('hidden')
            });
         }

         $('.sample_product.btn:not(.product_added)').on('click', function (e) {
            e.preventDefault();
            if (is_sampleProductID && sampleProductID !== "" && sampleProductID !== "undefined") {
              $(this).addClass('loading');
              getProductVariantData(selectedVariantId, (sampleItems) => {
                if (sampleItems && sampleItems.length >= 3) {
                  $('.sample_product.btn').addClass('product_added').find('span').text('3 Sample Limit Reached')
                  $('.sample_product.btn').removeClass('loading')
                } else {
                  var data = {
                    id: sampleProductID,
                    quantity: 1
                  };
                  $.ajax({
                    type: 'POST',
                    url: '/cart/add.js',
                    data: data,
                    dataType: 'json',
                    success: function (response) {
                      $('.sample_product.btn').addClass('product_added').find('span').text('Sample added to cart')
                      $('.sample_product.btn').removeClass('loading')
                      is_sampleProductID = false
                    },
                    error: function (error) {
                      console.error('Error adding product to cart:', error);
                      alert('There was an error adding the product to the cart.');
                    }
                  });
                }
              });
            }
          });
        
    })

  // product page nav animated scroll and open
      function scrollAndView(selector) {
        
        let el = document.getElementById(selector) || 
         document.querySelector('.' + selector);
        
        if (!el) return;

        const offset = 200; // stop 200px before the element
        const top = el.getBoundingClientRect().top + window.scrollY - offset;

        window.scrollTo({
          top,
          behavior: 'smooth'
        });

  if (el.tagName.toLowerCase() === 'details') {
    setTimeout(() => {
      el.open = true;
    }, 500);
  }
      }
  

  {% endif %}
  
  {% if template == 'cart' %}
      {% for item in cart.items %}            
          
        // EST Delivery Date Array
        estDeliveryDateArray.push({
          id: {{ item.id | json }},
          datestart: {%
          if item.variant.metafields.custom.estimated_delivery_date %}
            {% assign date_parts = item.variant.metafields.custom.estimated_delivery_date | split: '-' %}
            "{{ date_parts[0] }}"
          {% else %}
            ""
          {% endif %},
          dateend: {%
          if item.variant.metafields.custom.estimated_delivery_date %}
            {% assign date_parts = item.variant.metafields.custom.estimated_delivery_date | split: '-' %}
            "{{ date_parts[1] }}"
          {% else %}
            ""
          {% endif %},
          restock_date: {% if item.variant.metafields.custom.restocking_date %} "{{ item.variant.metafields.custom.restocking_date}}" {% else %} "" {% endif %}
        });
          
      {% endfor %}
    
      // EST Delivery Date Function
      function estDeliveryDate(){
          jQuery('#main-cart-items .cart-items .cart-item-group .cart-item').each(function(item){
            var matchVariantID = jQuery(this).find('.cart-item__details').find('.cart-item__name').attr('href')
            if(matchVariantID){
              matchVariantID = matchVariantID.split('variant=')[1]
            }
            const has_item = estDeliveryDateArray.find(item => item.id == matchVariantID)
            if(has_item){
              if(has_item.datestart !== "" && has_item.dateend !== ""){
                jQuery(this).find('.cart-item__details').find(`.cart-item__name[href*="${has_item.id}"]`).siblings('.est_delivery_date').show().find('p strong').html(`Est Delivery between <span class="fromDate">${deliveryDateConverter(has_item?.datestart).toString('dd MMM').split(' ')[2] + nth(parseInt(deliveryDateConverter(has_item?.datestart).toString('dd MMM').split(' ')[0])) + " " + deliveryDateConverter(has_item?.datestart).toString('dd MMM').split(' ')[1]}</span> and <span class="toDate">${deliveryDateConverter(has_item?.dateend).toString('dd MMM').split(' ')[2] + nth(parseInt(deliveryDateConverter(has_item?.dateend).toString('dd MMM').split(' ')[0])) + " " + deliveryDateConverter(has_item?.dateend).toString('dd MMM').split(' ')[1]}</span>.`);
              }
            }
          })
      }
    
  {% endif %}
</script>
