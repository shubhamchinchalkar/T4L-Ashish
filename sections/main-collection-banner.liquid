{% comment %}theme-check-disable ImgLazyLoading{% endcomment %}
{{ 'component-collection-hero.css' | asset_url | stylesheet_tag }}

{%- style -%}
  @media screen and (max-width: 749px) {
    .collection-hero--with-image .collection-hero__inner {
      padding-bottom: calc({{ settings.media_shadow_vertical_offset | at_least: 0 }}px + 2rem);
    }
  }
{%- endstyle -%}

<div class="collection-hero{% if section.settings.show_collection_image and collection.image %} collection-hero--with-image{% endif %} color-{{ section.settings.color_scheme }} gradient">
  <div class="collection-hero__inner page-width {% if settings.animations_reveal_on_scroll %} scroll-trigger animate--fade-in{% endif %}">
    <div class="collection-hero__text-wrapper">
      {% render 'breadcrumbs' %}
      {% unless collection.metafields.global['alt-title'] %}
        <h1 class="collection-hero__title">
          <span class="visually-hidden">{{ 'sections.collection_template.title' | t }}:
          </span>
          {{- collection.title | escape -}}
        </h1>
      {% else %}
        <div class="collection-hero__title h1">
          <span class="visually-hidden">{{ 'sections.collection_template.title' | t }}:
          </span>
          {{- collection.title | escape -}}
        </div>
      {% endunless %}

      {%- if section.settings.show_collection_description -%}
        {%- if collection.description != blank -%}
          <div class="collection-hero__description rte">{{ collection.description }}</div>
          {% if collection.description.size > 700 -%}
            <span class="readmore-link">Read More ▼</span>
          {%- endif -%}
          {%- comment -%} Sale banners / client-side filter UI {%- endcomment -%}
          {%- style -%}
            .collection-sale-filters {
              margin-top: 1.25rem;
              margin-bottom: 1.25rem;
            }
            .sale-filters__inner {
              display: flex;
              gap: 1rem;
              flex-wrap: wrap;
              align-items: center;
            }
            .sale-filter {
              border: none;
              padding: 0.6rem 1rem;
              border-radius: 8px;
              font-weight: 700;
              cursor: pointer;
              box-shadow: 0 6px 18px rgba(0, 0, 0, 0.06);
              background: #fff;
            }
            .sale-filter:focus {
              outline: 3px solid rgba(0, 0, 0, 0.08);
            }
            .sale-filter--active {
              box-shadow: 0 10px 28px rgba(240, 20, 20, 0.12);
              transform: translateY(-2px);
            }
            .sale-filter--clear {
              background: transparent;
              border: 1px solid #e0e0e0;
            }
            @media (max-width: 680px) {
              .sale-filters__inner {
                gap: 0.5rem;
              }
              .sale-filter {
                padding: 0.5rem 0.75rem;
                font-size: 0.95rem;
              }
            }
          {%- endstyle -%}

          <div class="collection-sale-filters page-width" aria-label="Sale filters">
            <div class="sale-filters__inner">
              <button
                type="button"
                class="sale-filter"
                data-min="1"
                data-max="25"
                aria-pressed="false">Up to 25% off</button>
              <button
                type="button"
                class="sale-filter"
                data-min="26"
                data-max="35"
                aria-pressed="false">26% – 35% off</button>
              <button
                type="button"
                class="sale-filter"
                data-min="36"
                data-max="100"
                aria-pressed="false">36% – 100% off</button>
              <button
                type="button"
                class="sale-filter sale-filter--clear"
                data-clear="true">Show all</button>
            </div>
          </div>

          <script>
            document.addEventListener('DOMContentLoaded', function () {
              var filterButtons = Array.from(document.querySelectorAll('.sale-filter'));
              var productListSelector = '#product-grid .grid__item';
              var originalCountNode = document.getElementById('ProductCountDesktop');
              var originalCountHTML = originalCountNode ? originalCountNode.innerHTML : null;
            
              function readURLParams() {
                var params = new URLSearchParams(window.location.search);
                return { min: params.get('sale_min'), max: params.get('sale_max') };
              }
            
              function writeURLParams(min, max) {
                var params = new URLSearchParams(window.location.search);
                if (min == null || max == null) {
                  params.delete('sale_min'); params.delete('sale_max');
                } else {
                  params.set('sale_min', String(min));
                  params.set('sale_max', String(max));
                }
                var newUrl = window.location.pathname + (params.toString() ? '?' + params.toString() : '');
                window.history.replaceState({}, '', newUrl);
              }
            
              function applyFilter(min, max) {
                var items = document.querySelectorAll(productListSelector);
                var visible = 0;
                items.forEach(function (li) {
                  var card = li.querySelector('[data-discount]');
                  var d = card ? parseInt(card.getAttribute('data-discount') || '0', 10) : 0;
                  var match = (min === null && max === null) || (d >= min && d <= max);
                  li.style.display = match ? '' : 'none';
                  if (match) visible++;
                });
                updateCount(visible);
              }
            
              function updateCount(visible) {
                if (!originalCountNode) return;
                if (visible === 0) {
                  originalCountNode.textContent = 'No products found for this discount range.';
                } else {
                  originalCountNode.textContent = 'Showing ' + visible + ' product' + (visible > 1 ? 's' : '');
                }
              }
            
              function clearActive() {
                filterButtons.forEach(function(b){ b.classList.remove('sale-filter--active'); b.setAttribute('aria-pressed','false'); });
              }
            
              function clearFilter() {
                clearActive();
                writeURLParams(null, null);
                var items = document.querySelectorAll(productListSelector);
                items.forEach(function(li){ li.style.display = ''; });
                if (originalCountHTML !== null) originalCountNode.innerHTML = originalCountHTML;
              }
            
              filterButtons.forEach(function(btn) {
                btn.addEventListener('click', function (e) {
                  if (btn.dataset.clear) {
                    clearFilter();
                    return;
                  }
                  var min = parseInt(btn.dataset.min, 10);
                  var max = parseInt(btn.dataset.max, 10);
                  clearActive();
                  btn.classList.add('sale-filter--active');
                  btn.setAttribute('aria-pressed','true');
                  writeURLParams(min, max);
                  applyFilter(min, max);
                });
              });
            
              // on load: apply any params
              var params = readURLParams();
              if (params.min && params.max) {
                var min = parseInt(params.min, 10);
                var max = parseInt(params.max, 10);
                // mark matching button active (if present)
                var match = filterButtons.find(function(b){ return b.dataset.min == String(min) && b.dataset.max == String(max); });
                if (match) { match.classList.add('sale-filter--active'); match.setAttribute('aria-pressed','true'); }
                applyFilter(min, max);
              }
            });
          </script>

        {%- endif -%}
      {%- endif -%}
    </div>

    {%- if section.settings.show_collection_image and collection.image -%}
      <div class="collection-hero__image-container media gradient">
        <img
          srcset="
            {%- if collection.image.width >= 165 -%}{{ collection.image | image_url: width: 165 }} 165w,{%- endif -%}
            {%- if collection.image.width >= 360 -%}{{ collection.image | image_url: width: 360 }} 360w,{%- endif -%}
            {%- if collection.image.width >= 535 -%}{{ collection.image | image_url: width: 535 }} 535w,{%- endif -%}
            {%- if collection.image.width >= 750 -%}{{ collection.image | image_url: width: 750 }} 750w,{%- endif -%}
            {%- if collection.image.width >= 1070 -%}{{ collection.image | image_url: width: 1070 }} 1070w,{%- endif -%}
            {%- if collection.image.width >= 1500 -%}{{ collection.image | image_url: width: 1500 }} 1500w,{%- endif -%}
            {{ collection.image | image_url }} {{ collection.image.width }}w
          "
          src="{{ collection.image | image_url: width: 750 }}"
          sizes="(min-width: {{ settings.page_width }}px) {{ settings.page_width | minus: 100 | divided_by: 2 }}px, (min-width: 750px) calc(50vw - 130px), calc(50vw - 55px)"
          alt="{{ collection.image.alt | escape }}"
          width="{{ collection.image.width }}"
          height="{{ collection.image.height }}">
      </div>
    {%- endif -%}
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const readMoreButton = document.querySelector('.readmore-link');
    const description = document.querySelector('.collection-hero__description');
  
    readMoreButton.addEventListener('click', () => {
      if (description.classList.contains('expanded')) {
        description.classList.remove('expanded');
        readMoreButton.textContent = 'Read more ▼';
      } else {
        description.classList.add('expanded');
        readMoreButton.textContent = 'Read less ▲';
      }
    });
  });
</script>

{% schema %}
  {
    "name": "t:sections.main-collection-banner.name",
    "class": "section",
    "settings": [
      {
        "type": "paragraph",
        "content": "t:sections.main-collection-banner.settings.paragraph.content"
      }, {
        "type": "checkbox",
        "id": "show_collection_description",
        "default": true,
        "label": "t:sections.main-collection-banner.settings.show_collection_description.label"
      }, {
        "type": "checkbox",
        "id": "show_collection_image",
        "default": false,
        "label": "t:sections.main-collection-banner.settings.show_collection_image.label",
        "info": "t:sections.main-collection-banner.settings.show_collection_image.info"
      }, {
        "type": "color_scheme",
        "id": "color_scheme",
        "label": "t:sections.all.colors.label",
        "default": "scheme-1"
      }
    ]
  }
{% endschema %}