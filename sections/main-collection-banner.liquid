{% comment %}theme-check-disable ImgLazyLoading{% endcomment %}
{{ 'component-collection-hero.css' | asset_url | stylesheet_tag }}

{%- style -%}
  @media screen and (max-width: 749px) {
    .collection-hero--with-image .collection-hero__inner {
      padding-bottom: calc({{ settings.media_shadow_vertical_offset | at_least: 0 }}px + 2rem);
    }
  }
{%- endstyle -%}

<div class="collection-hero{% if section.settings.show_collection_image and collection.image %} collection-hero--with-image{% endif %} color-{{ section.settings.color_scheme }} gradient">
  <div class="collection-hero__inner page-width {% if settings.animations_reveal_on_scroll %} scroll-trigger animate--fade-in{% endif %}">
    <div class="collection-hero__text-wrapper">
      {% render 'breadcrumbs' %}
      {% unless collection.metafields.global['alt-title'] %}
        <h1 class="collection-hero__title">
          <span class="visually-hidden">{{ 'sections.collection_template.title' | t }}:
          </span>
          {{- collection.title | escape -}}
        </h1>
      {% else %}
        <div class="collection-hero__title h1">
          <span class="visually-hidden">{{ 'sections.collection_template.title' | t }}:
          </span>
          {{- collection.title | escape -}}
        </div>
      {% endunless %}

      {%- if section.settings.show_collection_description -%}
        {%- if collection.description != blank -%}
          <div class="collection-hero__description rte">{{ collection.description }}</div>
          {% if collection.description.size > 700 -%}
            <span class="readmore-link">Read More ▼</span>
          {%- endif -%}
          {%- comment -%} 
                        Sale filter banners (front-end only).
                        Placement: paste this immediately after the collection description div in
                        sections/main-collection-banner.liquid 
                    {%- endcomment -%}

          {%- if collection.handle == 'on-sale' -%}
            <div class="collection-sale-filter" aria-hidden="false">
              <style>
                /* Simple styles (change colors to match your theme) */
                .sale-filter-banners {
                  display: flex;
                  flex-wrap: wrap;
                  gap: 12px;
                  margin-top: 1.2rem
                }
                .sale-filter-btn {
                  background: #ff3b30;
                  color: #fff;
                  border: 0;
                  padding: 8px 14px;
                  border-radius: 10px;
                  font-weight: 600;
                  cursor: pointer;
                  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.12);
                }
                .sale-filter-btn:focus {
                  outline: 3px solid rgba(0, 0, 0, 0.08)
                }
                .sale-filter-btn.active {
                  transform: translateY(-2px);
                  box-shadow: 0 10px 24px rgba(0, 0, 0, 0.18)
                }
                .sale-filter-no-results {
                  color: #444;
                  margin-top: 1rem;
                  font-style: italic
                }
                @media (max-width: 640px) {
                  .sale-filter-banners {
                    justify-content: flex-start
                  }
                }
              </style>

              <div
                class="sale-filter-banners"
                role="tablist"
                aria-label="Sale filters">
                <button
                  type="button"
                  class="sale-filter-btn"
                  data-min="1"
                  data-max="25">Up to 25% off</button>
                <button
                  type="button"
                  class="sale-filter-btn"
                  data-min="26"
                  data-max="35">26% → 35% off</button>
                <button
                  type="button"
                  class="sale-filter-btn"
                  data-min="36"
                  data-max="50">36% → 50% off</button>
                <button
                  type="button"
                  class="sale-filter-btn sale-filter-reset"
                  data-min="0"
                  data-max="999">Show all</button>
              </div>

              <script>
                (function () {
                  // Enable debug by either adding ?saleDebug=true to the URL or by setting DEBUG=true here
                  var DEBUG = window.location.search.indexOf('saleDebug=true') !== -1 || false;
                
                  function extractMoneyFromText(text) {
                    if (!text) return [];
                    var re = /£\s*([\d,]+(?:\.\d+)?)/g;
                    var m;
                    var nums = [];
                    while ((m = re.exec(text)) !== null) {
                      nums.push(parseFloat(m[1].replace(/,/g, '')));
                    }
                    return nums;
                  }
                
                  function extractMoneyFromElement(el) {
                    if (!el) return null;
                    var txt = (el.textContent || el.innerText || '').trim();
                    var match = txt.match(/£\s*([\d,]+(?:\.\d+)?)/);
                    if (match) return parseFloat(match[1].replace(/,/g, ''));
                    return null;
                  }
                
                  // Common selectors to find the compare-at (original) price and the current price.
                  var COMPARE_SELECTORS = [
                    '.price--compare', '.price-item--compare-at', '.price--was', '.was-price',
                    '.product-card__price--compare', '.product-card__was', '.price--old', '.price--compare-at',
                    '.compare-at', '.price-item.compare', '.price__was', '.price .was', '.price--regular .was'
                  ];
                  var PRICE_SELECTORS = [
                    '.price--sale .price-item', '.price-item--sale', '.price--current', '.price-item--regular',
                    '.product-card__price .price', '.price', '.price-item', 'span.money', '.price__final'
                  ];
                
                  function findFirstMatch(card, selectors) {
                    for (var i = 0; i < selectors.length; i++) {
                      var el = card.querySelector(selectors[i]);
                      if (el) {
                        var v = extractMoneyFromElement(el);
                        if (v !== null) return v;
                      }
                    }
                    return null;
                  }
                
                  function computeDiscountForCard(card) {
                    if (card.dataset.discountCalculated === '1') return;
                    card.dataset.discountCalculated = '1';
                
                    // Try targeted selectors first
                    var compare = findFirstMatch(card, COMPARE_SELECTORS);
                    var price = findFirstMatch(card, PRICE_SELECTORS);
                
                    // Try "Was £..." textual pattern (very common)
                    if (!compare) {
                      var wasMatch = (card.innerText || '').match(/Was\s*£\s*([\d,]+(?:\.\d+)?)/i);
                      if (wasMatch) compare = parseFloat(wasMatch[1].replace(/,/g, ''));
                    }
                
                    // Fallback: find all currency amounts in the card and take min/max
                    var all = extractMoneyFromText(card.innerText || '');
                    if (!price && all.length) price = Math.min.apply(null, all);
                    if (!compare && all.length) compare = Math.max.apply(null, all);
                
                    // If still missing or invalid, set 0
                    if (!compare || !price || compare <= price) {
                      card.dataset.salePercent = '0';
                    } else {
                      // percent = round(((compare - price) / compare) * 100)
                      var pct = Math.round(((compare - price) / compare) * 100);
                      card.dataset.salePercent = String(pct);
                    }
                
                    if (DEBUG) {
                      // Add a small debug badge so you can visually inspect computed percent
                      var existing = card.querySelector('.__sale_pct_badge');
                      if (!existing) {
                        var b = document.createElement('div');
                        b.className = '__sale_pct_badge';
                        b.style.position = 'absolute';
                        b.style.right = '8px';
                        b.style.top = '8px';
                        b.style.padding = '6px 8px';
                        b.style.background = 'rgba(0,0,0,0.8)';
                        b.style.color = '#fff';
                        b.style.fontSize = '12px';
                        b.style.borderRadius = '6px';
                        b.style.zIndex = 9999;
                        // ensure the card can position children
                        if (getComputedStyle(card).position === 'static') {
                          card.style.position = 'relative';
                        }
                        card.appendChild(b);
                        existing = b;
                      }
                      existing.textContent = card.dataset.salePercent + '%';
                      console.log('[sale-filter-debug] card:', card, {
                        all: all,
                        price: price,
                        compare: compare,
                        pct: card.dataset.salePercent
                      });
                    }
                  }
                
                  function processAllCards() {
                    var grid = document.querySelector('ul.grid') || document.querySelector('.product-grid') || document.querySelector('.grid.product-grid') || document.querySelector('.collection__products');
                    if (!grid) return;
                    // Common item selectors used by many Shopify themes:
                    var cards = grid.querySelectorAll('li.grid__item, .grid__item, .product-card, .product-item, li.product');
                    if (!cards) return;
                    cards.forEach(function (card) { computeDiscountForCard(card); });
                  }
                
                  function applyFilter(min, max) {
                    var grid = document.querySelector('ul.grid') || document.querySelector('.product-grid') || document.querySelector('.grid.product-grid') || document.querySelector('.collection__products');
                    if (!grid) return;
                    var cards = grid.querySelectorAll('li.grid__item, .grid__item, .product-card, .product-item, li.product');
                    var visible = 0;
                    cards.forEach(function (card) {
                      var pct = Number(card.dataset.salePercent || 0);
                      // show only when pct is inside range and > 0
                      if (pct >= min && pct <= max && pct > 0) {
                        card.style.display = '';
                        visible++;
                      } else {
                        card.style.display = 'none';
                      }
                    });
                
                    var existing = document.querySelector('.sale-filter-no-results');
                    if (!existing) {
                      existing = document.createElement('div');
                      existing.className = 'sale-filter-no-results';
                      existing.style.color = '#444';
                      existing.style.marginTop = '1rem';
                      existing.style.fontStyle = 'italic';
                      var gridParent = grid.parentNode || document.body;
                      gridParent.insertBefore(existing, grid.nextSibling);
                    }
                    existing.textContent = visible ? '' : 'No products found in this discount range.';
                    existing.style.display = visible ? 'none' : 'block';
                  }
                
                  // Click handling (delegation)
                  document.addEventListener('click', function (e) {
                    var btn = e.target.closest('.sale-filter-btn');
                    if (!btn) return;
                    var all = document.querySelectorAll('.sale-filter-btn');
                    if (btn.classList.contains('sale-filter-reset')) {
                      all.forEach(function (b) { b.classList.remove('active'); });
                      var cards = document.querySelectorAll('li.grid__item, .grid__item, .product-card, .product-item, li.product');
                      cards.forEach(function (c) { c.style.display = ''; });
                      var existing = document.querySelector('.sale-filter-no-results');
                      if (existing) existing.style.display = 'none';
                      return;
                    }
                    all.forEach(function (b) { b.classList.toggle('active', b === btn); });
                
                    // Ensure discounts are calculated before filtering
                    processAllCards();
                
                    var min = Number(btn.getAttribute('data-min') || 0);
                    var max = Number(btn.getAttribute('data-max') || 999);
                    applyFilter(min, max);
                  });
                
                  // Run on DOM ready and watch for new items (infinite scroll / pagination)
                  document.addEventListener('DOMContentLoaded', function () {
                    processAllCards();
                    var grid = document.querySelector('ul.grid') || document.querySelector('.product-grid') || document.querySelector('.grid.product-grid') || document.querySelector('.collection__products');
                    if (grid) {
                      var mo = new MutationObserver(function () { processAllCards(); });
                      mo.observe(grid, { childList: true, subtree: true });
                    } else {
                      // short poll fallback
                      var poll = setInterval(function () {
                        var g = document.querySelector('ul.grid') || document.querySelector('.product-grid') || document.querySelector('.grid.product-grid') || document.querySelector('.collection__products');
                        if (g) {
                          clearInterval(poll);
                          processAllCards();
                          var mo2 = new MutationObserver(function () { processAllCards(); });
                          mo2.observe(g, { childList: true, subtree: true });
                        }
                      }, 400);
                      setTimeout(function () { clearInterval(poll); }, 8000);
                    }
                  });
                
                })();
              </script>

            </div>
          {%- endif -%}


        {%- endif -%}
      {%- endif -%}
    </div>

    {%- if section.settings.show_collection_image and collection.image -%}
      <div class="collection-hero__image-container media gradient">
        <img
          srcset="
            {%- if collection.image.width >= 165 -%}{{ collection.image | image_url: width: 165 }} 165w,{%- endif -%}
            {%- if collection.image.width >= 360 -%}{{ collection.image | image_url: width: 360 }} 360w,{%- endif -%}
            {%- if collection.image.width >= 535 -%}{{ collection.image | image_url: width: 535 }} 535w,{%- endif -%}
            {%- if collection.image.width >= 750 -%}{{ collection.image | image_url: width: 750 }} 750w,{%- endif -%}
            {%- if collection.image.width >= 1070 -%}{{ collection.image | image_url: width: 1070 }} 1070w,{%- endif -%}
            {%- if collection.image.width >= 1500 -%}{{ collection.image | image_url: width: 1500 }} 1500w,{%- endif -%}
            {{ collection.image | image_url }} {{ collection.image.width }}w
          "
          src="{{ collection.image | image_url: width: 750 }}"
          sizes="(min-width: {{ settings.page_width }}px) {{ settings.page_width | minus: 100 | divided_by: 2 }}px, (min-width: 750px) calc(50vw - 130px), calc(50vw - 55px)"
          alt="{{ collection.image.alt | escape }}"
          width="{{ collection.image.width }}"
          height="{{ collection.image.height }}">
      </div>
    {%- endif -%}
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const readMoreButton = document.querySelector('.readmore-link');
    const description = document.querySelector('.collection-hero__description');
  
    readMoreButton.addEventListener('click', () => {
      if (description.classList.contains('expanded')) {
        description.classList.remove('expanded');
        readMoreButton.textContent = 'Read more ▼';
      } else {
        description.classList.add('expanded');
        readMoreButton.textContent = 'Read less ▲';
      }
    });
  });
</script>

{% schema %}
  {
    "name": "t:sections.main-collection-banner.name",
    "class": "section",
    "settings": [
      {
        "type": "paragraph",
        "content": "t:sections.main-collection-banner.settings.paragraph.content"
      }, {
        "type": "checkbox",
        "id": "show_collection_description",
        "default": true,
        "label": "t:sections.main-collection-banner.settings.show_collection_description.label"
      }, {
        "type": "checkbox",
        "id": "show_collection_image",
        "default": false,
        "label": "t:sections.main-collection-banner.settings.show_collection_image.label",
        "info": "t:sections.main-collection-banner.settings.show_collection_image.info"
      }, {
        "type": "color_scheme",
        "id": "color_scheme",
        "label": "t:sections.all.colors.label",
        "default": "scheme-1"
      }
    ]
  }
{% endschema %}